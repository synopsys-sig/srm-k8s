# -- the K8s image pull secret to use for SRM Docker images
# Command: kubectl create secret docker-registry private-registry --docker-server=your-registry-server --docker-username=your-username --docker-password=your-password --docker-email=your-email
imagePullSecrets: []
#  - name: private-registry

features:
  # -- whether to enable the Scan Farm feature, which requires an SRM Scan Farm license
  scanfarm: false
  # -- whether to enable the on-cluster MariaDB; an external database must be used otherwise
  mariadb: true
  # -- whether to enable the on-cluster MinIO for the SRM Tool Orchestration feature; an external object storage system must be used otherwise
  minio: false
  # -- whether to enable the Tool Orchestration feature, which requires an SRM Tool Orchestration license
  to: false

# -- controls sizing for the Core and Tool Orchestration features (does not cover dependencies)
sizing:
  # -- whether the deployment size is considered Unspecified, Small, Medium, Large, or Extra Large (see https://github.com/codedx/srm-k8s/blob/main/docs/DeploymentGuide.md#system-size)
  size: Unspecified
  # -- the version of the sizing guidance
  version: v1.0

# -- labels added to SRM pods of the Core and TO features
podLabels: {}

ingress:
  # -- whether to enable an SRM ingress (required for the Scan Farm feature)
  enabled: false
  # -- the class name for the SRM ingress
  className: "nginx"
  annotations:
    web:
      # -- the proxy read timeout for the web component ingress
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      # -- the max proxy body size for the web component ingress (no max when 0)
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
    scanfarm:
      scan:
        # -- the max proxy body size for the scan service ingress (no max when 0)
        nginx.ingress.kubernetes.io/proxy-body-size: "500m"
      storage:
        # -- the max proxy body size for the storage service ingress (no max when 0)
        nginx.ingress.kubernetes.io/proxy-body-size: "500m"
      cache:
        # -- the max proxy body size for the cache service ingress (no max when 0)
        nginx.ingress.kubernetes.io/proxy-body-size: "500m"
        # -- the protocol for the K8s cache service
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  hosts:
    # -- the host to associate with the SRM ingress
    - host: chart-example.local
  # -- the TLS configuration for the SRM ingress
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

networkPolicy:
  # -- whether to enable network policies for SRM components that support network policy
  enabled: false
  # -- the port for the K8s API, required when using the Tool Orchestration feature
  k8sApiPort: 443
  web:
    egress:
      extraPorts:
        # -- the TCP ports allowed for egress from the web component
        tcp: [22, 53, 80, 389, 443, 636, 7990, 7999, 8443]
        # -- the UDP ports allowed for egress from the web component
        udp: [53, 389, 636, 3269]

openshift:
  # -- whether to create SecurityContextConstraint resources, which is required when using OpenShift
  createSCC: false

web:
  # @ignore
  affinity: {}

  # -- the optional context path for the web component
  appName:

  authentication:
    saml:
      # -- whether to use SAML authentication
      enabled: false
      # -- the application/client name for the SRM SAML registration
      appName:
      # -- the host base path for the SRM SAML registration (https://mysrmhost/srm)
      hostBasePath:
      # -- the configmap name containing the IdP metadata file with required field saml-idp.xml
      samlIdpXmlFileConfigMap:
      # -- the K8s secret name containing the SAML keystore passwords with required field saml-keystore.props
      # that contains a HOCON-formatted file with SRM props auth.saml2.keystorePassword and auth.saml2.privateKeyPassword
      # File:
      # auth.saml2.keystorePassword = """keystore-password"""
      # auth.saml2.privateKeyPassword = """private-key-password"""
      samlSecret: ""

  # -- the K8s secret name containing the Java keystore contents and its password with required fields cacerts and cacerts-password
  # Note: cacerts must trust the database cert when using 'REQUIRE SSL' with an external database
  # Command: kubectl -n srm create secret generic srm-web-cacerts-secret --from-file cacerts=./cacerts --from-literal cacerts-password=changeit
  cacertsSecret: ""

  database:
    # -- the K8s secret name containing the database connection properties with required field db.props that
    # contains a HOCON-formatted file with SRM props swa.db.user and swa.db.password
    # File:
    # swa.db.user = """username"""
    # swa.db.password = """password"""
    # Command:
    # kubectl -n srm create secret generic srm-web-db-cred-secret --from-file db.props=./db.props
    credentialSecret: ""
    # -- the URL for the external SRM web database (jdbc:mysql://my-srm-web-db-host:3306/my-srm-web-db-name?useSSL=true&requireSSL=true)
    externalDbUrl:
    # -- the K8s configmap name containing the RSA public key when using MySQL's caching_sha2_password plugin
    # Note: see the caching_sha2_password_public_key_path MySQL variable for the public key file location
    # Command:
    # kubectl -n srm create configmap srm-web-db-public-key-configmap --from-file db-public-key=/path/to/public_key.pem
    publicKeyConfigMap: ""

  image:
    # -- the registry name and optional registry suffix for the SRM web Docker image
    registry: docker.io
    # -- the Docker image repository name for the SRM web workload
    repository: codedx/codedx-tomcat
    # -- the Docker image version for the SRM web workload
    tag: v2024.12.0
    # -- the K8s Docker image pull policy for the SRM web workload
    pullPolicy: IfNotPresent

  # -- the Java options for the SRM web workload
  javaOpts: "-XX:MaxRAMPercentage=75.0"

  # -- the K8s secret name containing the SRM license password with required field license.lic
  # Command:
  # kubectl -n srm create secret generic srm-web-license-secret --from-file license.lic=./license.lic
  licenseSecret: ""

  # -- the K8s configmap containing the logging configuration file with required field logback.xml
  # Command:
  # kubectl -n srm create configmap srm-web-logging-cfgmap --from-file logback.xml=./logback.xml
  loggingConfigMap: ""

  # -- the node selector to use for the SRM web workload
  nodeSelector: {}

  # -- the pod annotations to use for the SRM web pod
  podAnnotations: {}

  podDisruptionBudget:
    # -- whether to create a pod disruption budget for the web component
    enabled: false

  podSecurityContext:
    # -- the fsGroup for the SRM web pod
    fsGroup: 1000
    # -- the gid for the SRM web pod
    runAsGroup: 1000
    # -- the uid for the SRM web pod
    runAsUser: 1000
    # -- whether to run the SRM web pod as non-root
    runAsNonRoot: true
    # -- the seccomp profile for the SRM web pod
    seccompProfile:
      # -- the type of seccomp profile for the SRM web pod
      type: RuntimeDefault
    # -- the supplemental groups for the SRM web pod
    supplementalGroups: []

  props:
    auth:
      cookie:
        # -- whether to set the Secure attribute on the auth cookie, set to true when using HTTPS
        secure: false
    limits:
      analysis:
        # -- the value of the SRM prop analysis.concurrent-analysis-limit, which determines the maximum number of analyses to run concurrently
        concurrent: 8
      database:
        # -- the size of the database connection pool
        poolSize: 12
        # -- the maximum milliseconds that a client will wait for a database connection from the pool
        timeout: 60000
      jobs:
        # -- the value of the SRM prop swa.jobs.cpu-limit, which determines the maximum available CPU
        cpu: 4000
        # -- the value of the SRM prop swa.jobs.memory-limit, which determines the maximum available memory
        memory: 4000
        # -- the value of the SRM prop swa.jobs.database-limit, which determines the maximum available database I/O
        database: 4000
        # -- the value of the SRM prop swa.jobs.disk-limit, which determins the maximum available disk I/O
        disk: 4000
    # -- the list of extra resources containing SRM prop settings
    extra: []

  resources:
    limits:
      # -- the required CPU for the web workload (must be >= 2 vCPUs)
      cpu: 4000m
      # -- the required memory for the web workload
      memory: 16384Mi
      # -- the ephemeral storage for the web workload
      ephemeral-storage: 2868Mi

  persistence:
    # -- the access mode for the AppData persistent volume
    accessMode: ReadWriteOnce
    # -- the existing claim to use for the AppData persistent volume; a new persistent volume is generated when unset
    existingClaim: ""
    # -- the size of the AppData persistent volume
    size: 64Gi
    # -- the storage class name for the AppData persistent volume; the default storage class used when unset
    storageClass:

  priorityClass:
    # -- whether to create a PriorityClass resource for the web component
    create: false
    # -- the web component priority value, which must be set relative to other Tool Orchestration component priority values
    value: 10100

  scanfarm:
    sast:
      # -- the SAST component version to use for build-less scans (must match scan service's TOOL_COVERITY_VERSION environment variable)
      version: 2024.9.1
    sca:
      # -- the SCA component version to use for build-less scans (must match scan service's TOOL_DETECT_VERSION environment variable)
      version: 9.2.0
    key:
      # -- the duration of the Scan Farm API key
      validForDays: 45
      # -- the Scan Farm API key regeneration period (minute hour day-of-month month day-of-week)
      regenSchedule: '0 0 1 * *'

  securityContext:
    # -- whether the SRM web workload uses a read-only filesystem
    readOnlyRootFilesystem: true
    # -- whether the SRM web workload supports privilege escalation
    allowPrivilegeEscalation: false
    # -- the SRM web workflow capabilities
    capabilities:
      # -- capabilities to remove from the SRM web workload
      drop: [ALL]

  service:
    # -- the annotations to apply to the SRM web service
    annotations: {}
    # -- the service type of the SRM web service
    type: ClusterIP
    # -- the port number of the SRM web service
    port: 9090
    # -- the name of the service port (set to 'https' for HTTPS ports, required for AWS ELB configuration)
    port_name: http

  serviceAccount:
    # -- whether to create a service account for the SRM web service
    create: true
    # -- the annotations to apply to the SRM service account
    annotations: {}
    # -- the name of the service account to use; a name is generated using the fullname template when unset and create is true
    name: ""

  # -- the K8s secret name for web component TLS with required fields tls.crt and tls.key
  # Command:
  # kubectl -n srm create secret tls web-tls-secret --cert=path/to/cert-file --key=path/to/key-file
  tlsSecret:

  # -- the pod tolerations for the web component
  tolerations: []

  # -- the K8s secret name containing the API key for the Tool Orchestration tool service with required field to-key.props that
  # contains a HOCON-formatted file with SRM prop tws.api-key
  # File:
  # tws.api-key = """password"""
  # Command:
  # kubectl -n srm create secret generic to-key-secret --from-file to-key.props=./to-key.props
  toSecret:

  # -- the K8s secret name containing the administrator password with required field admin-password
  # Command:
  # kubectl -n srm create secret generic srm-web-secret --from-literal admin-password=password
  webSecret: ""


scan-services:
  # -- the image pull policy for scan farm components
  imagePullPolicy: "Always"

  common-infra:
    # -- the schedule to use for the cleanup cronjob - must be a valid schedule for a K8s cronjob
    cleanupSchedule: '*/55 * * * *'

  # @ignore
  mode: "SRM"

  scan-service:
    # @ignore
    retention:
      # @ignore
      enabled: false
    environment:
      # -- must match web.scanfarm.sca.version
      TOOL_DETECT_VERSION: "9.2.0"
      # -- must match web.scanfarm.sast.version
      TOOL_COVERITY_VERSION: "2024.9.1"
      # @ignore
      SCANFARM_CONSUMER_TYPE: "Srm"
      # -- SRM version reported to scan service
      SCANFARM_CONSUMER_VERSION: "2024.9.0"

  # @ignore
  cache-service:
    # @ignore
    enabled: true

  # @ignore
  trust-stores:
    # @ignore
    enabled: false

mariadb:
  db:
    # -- the on-cluster database username for SRM web (must be codedx)
    user: codedx
    # -- the on-cluster database catalog name for SRM web (must be codedx)
    name: codedx
  # -- the K8s secret name containing the on-cluster MariaDB root and user passwords with required fields mariadb-root-password and mariadb-password, optionally mariadb-replication-password when using replication
  # Command:
  # kubectl -n srm create secret generic srm-mariadb-secret --from-literal mariadb-root-password=password --from-literal mariadb-password=password --from-literal mariadb-replication-password=password
  existingSecret: ""
  image:
    # -- the registry name and optional registry suffix for the MariaDB Docker image
    registry: docker.io
    # -- the Docker image repository name for the MariaDB workload
    repository: codedx/codedx-mariadb
    # -- the Docker image version for the MariaDB workload
    tag: v1.36.0
    # -- the K8s Docker image pull policy for the MariaDB workload
    pullPolicy: IfNotPresent
    # -- the K8s image pull secret to use for MariaDB Docker images
    pullSecrets: []
    #  - private-registry
  # -- labels added to database pod(s)
  podLabels: {}
  serviceAccount:
    # -- whether to create a service account for the MariaDB service
    create: true
  master:
    # @ignore
    # the mysql configuration for the primary database
    config: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=utf8mb4
      collation-server=utf8mb4_general_ci
      optimizer_search_depth=0
      lower_case_table_names=1
      innodb_flush_log_at_trx_commit=0
      log_bin_trust_function_creators=1
      expire_logs_days=5
      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    # -- the configmap name containing the CA cert with required field ca.crt
    # Command:
    # kubectl -n srm create configmap master-ca-configmap --from-file ca.crt=/path/to/ca.crt
    masterCaConfigMap:
    # -- the K8s secret name containing the public and private TLS key with required fields tls.crt and tls.key
    # Command:
    # kubectl -n srm create secret tls master-tls-secret --cert=path/to/cert-file --key=path/to/key-file
    masterTlsSecret:
    # -- the node selector to use for the MariaDB primary database workload
    nodeSelector: {}
    persistence:
      # -- the existing claim to use for the MariaDB primary persistent volume; a new persistent volume is generated when unset
      existingClaim:
      # -- the storage class name for the MariaDB primary persistent volume; the default storage class used when unset
      storageClass:
      # -- the size of the MariaDB persistent volume
      size: 64Gi
    podDisruptionBudget:
      # -- whether to create a pod disruption budget for the MariaDB primary database component
      enabled: false
      # -- the maximum number of unavailable instances of the MariaDB primary database component
      maxUnavailable: 0
    priorityClass:
      # -- whether to create a PriorityClass resource for the MariaDB primary database component
      create: false
      # -- the MariaDB primary database component priority value, which must be set relative to other Tool Orchestration component priority values
      value: 10200
    resources:
      limits:
        # -- the required CPU for the MariaDB primary database workload
        cpu: 4000m
        # -- the required memory for the MariaDB primary database workload
        memory: 16384Mi
    # -- the pod tolerations for the MariaDB primary database component
    tolerations: []
  replication:
    # -- whether to enable MariaDB replication
    enabled: false
  slave:
    annotations:
      # -- the annotations for the MariaDB replica database component
      backup.codedx.io/type: none
    # @ignore
    # the mysql configuration for the replica database
    config: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=utf8mb4
      collation-server=utf8mb4_general_ci
      optimizer_search_depth=0
      lower_case_table_names=1
      innodb_flush_log_at_trx_commit=0
      log_bin_trust_function_creators=1
      expire_logs_days=5

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    # -- the node selector to use for the MariaDB replica database workload
    nodeSelector: {}
    persistence:
      backup:
        # -- the size of the backup persistent volume
        size: 64Gi
      # -- the size of the MariaDB replica database persistent volume
      size: 64Gi
      # -- the storage class name for the MariaDB replica persistent volume; the default storage class used when unset
      storageClass:
    podDisruptionBudget:
      # -- whether to create a pod disruption budget for the MariaDB replica database component
      enabled: false
      # -- the minimum number of available instances of the MariaDB replica database component
      minAvailable: 1
    priorityClass:
      # -- whether to create a PriorityClass resource for the MariaDB replica database component
      create: false
      # -- the MariaDB replica database component priority value, which must be set relative to other Tool Orchestration component priority values
      value: 10200
    # -- the number of replica database workloads
    replicas: 1
    resources:
      limits:
        # -- the required CPU for the MariaDB replica database workload
        cpu: 2000m
        # -- the required memory for the MariaDB replica database workload
        memory: 8192Mi
    # -- the pod tolerations for the MariaDB replica database component
    tolerations: []
  # @ignore
  tests:
    # @ignore
    enabled: false

to:
  resources:
    requests:
      # -- the requested ephemeral storage for the tool service workload
      storage: 5Mi
    limits:
      # -- the required CPU for the tool service workload
      cpu: 1000m
      # -- the required memory for the tool service workload
      memory: 1024Mi
  service:
    # -- the number of tool service replicas
    numReplicas: 1
