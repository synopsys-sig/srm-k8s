#
# Follow the instructions at https://cert-manager.io/docs/usage/kube-csr/ to install cert-manager kube-csr - you can
# find an example at https://github.com/codedx/srm-k8s/blob/main/docs/DeploymentGuide.md#cert-manager-self-signed-ca-example
#
# (the commands below are also available at https://github.com/codedx/srm-k8s/blob/main/docs/DeploymentGuide.md#helm-tls-values-values-tlsyaml)
#
# $ export CACERTS_PATH='/path/to/cacerts'
# $ export CERT_MANAGER_NAMESPACE='cert-manager'
# $ export SRM_NAMESPACE='srm'
# $ export SRM_RELEASE_NAME='srm'
# $ export CERT_SIGNER='clusterissuers.cert-manager.io/ca-issuer'
# 
# $ export CA_CONFIGMAP_NAME='srm-ca-configmap'
# $ export SRM_WEB_SECRET_NAME='srm-web-tls-secret'
# $ export SRM_DB_SECRET_NAME='srm-db-tls-secret'
# $ export SRM_TO_SECRET_NAME='srm-to-tls-secret'
# $ export SRM_MINIO_SECRET_NAME='srm-minio-tls-secret'
# $ export SRM_WEB_CACERTS_SECRET_NAME='srm-web-cacerts-secret'
# 
# $ # Fetch CA cert from cert-manager (replace ca-key-pair accordingly)
# $ kubectl -n $CERT_MANAGER_NAMESPACE get secret ca-key-pair -o jsonpath="{.data.tls\.crt}" | base64 -d > ca.crt
# 
# $ # Create SRM namespace (if necessary)
# $ kubectl create ns $SRM_NAMESPACE
#
# $ # Create CA ConfigMap
# $ kubectl -n $SRM_NAMESPACE create configmap $CA_CONFIGMAP_NAME --from-file ca.crt=ca.crt
# $ # Create CA Secret by the same name, which is required for workflows to access object storage
# $ kubectl -n $SRM_NAMESPACE create secret generic $CA_CONFIGMAP_NAME --from-file ca.crt=ca.crt
# 
# $ # Remove any previous srm-ca entry
# $ keytool -delete -keystore $CACERTS_PATH -alias 'srm-ca' -noprompt -storepass 'changeit'
#
# $ # Add ca.crt to cacerts file (your config.json caCertsFilePath parameter value)
# $ keytool -import -trustcacerts -keystore $CACERTS_PATH -file ca.crt -alias 'srm-ca' -noprompt -storepass 'changeit'
#
# $ # Create cacerts Secret
# $ kubectl -n $SRM_NAMESPACE create secret generic $SRM_WEB_CACERTS_SECRET_NAME --from-file cacerts=$CACERTS_PATH --from-literal cacerts-password=changeit
#
# $ # Start pwsh session
# $ pwsh
# PS> $global:PSNativeCommandArgumentPassing='Legacy'
# PS> Install-Module guided-setup -RequiredVersion 1.17.0
#
# PS> $caPath = Get-ChildItem ./ca.crt | Select-Object -ExpandProperty FullName
# 
# PS> # Create SRM web certificate
# PS> $webSvcName = "$(Get-HelmChartFullnameEquals $env:SRM_RELEASE_NAME 'srm')-web"
# PS> New-Certificate $env:CERT_SIGNER $caPath $webSvcName $webSvcName './web-tls.crt' './web-tls.key' $env:SRM_NAMESPACE
# 
# PS> # Create SRM web Secret
# PS> New-CertificateSecretResource $env:SRM_NAMESPACE $env:SRM_WEB_SECRET_NAME './web-tls.crt' './web-tls.key'
# 
# PS> # Create primary DB certificate (required for deployments using an on-cluster MariaDB)
# PS> $dbSvcName = Get-HelmChartFullnameContains $env:SRM_RELEASE_NAME 'mariadb'
# PS> New-Certificate $env:CERT_SIGNER $caPath $dbSvcName $dbSvcName './db-tls.crt' './db-tls.key' $env:SRM_NAMESPACE
# 
# PS> # Create DB Secret (required for deployments using an on-cluster MariaDB)
# PS> New-CertificateSecretResource $env:SRM_NAMESPACE $env:SRM_DB_SECRET_NAME './db-tls.crt' './db-tls.key'
# 
# PS> # Create TO certificate (required for deployments using Tool Orchestration)
# PS> $toSvcName = "$(Get-HelmChartFullnameEquals $env:SRM_RELEASE_NAME 'srm')-to"
# PS> New-Certificate $env:CERT_SIGNER $caPath $toSvcName $toSvcName './to-tls.crt' './to-tls.key' $env:SRM_NAMESPACE
# 
# PS> # Create TO Secret (required for deployments using Tool Orchestration)
# PS> New-CertificateSecretResource $env:SRM_NAMESPACE $env:SRM_TO_SECRET_NAME './to-tls.crt' './to-tls.key'
# 
# PS> # Create MinIO certificate (required for deployments using an on-cluster, built-in MinIO)
# PS> $minioSvcName = Get-HelmChartFullnameContains $env:SRM_RELEASE_NAME 'minio'
# PS> New-Certificate $env:CERT_SIGNER $caPath $minioSvcName $minioSvcName './minio-tls.crt' './minio-tls.key' $env:SRM_NAMESPACE
# 
# PS> # Create MinIO Secret (required for deployments using an on-cluster, built-in MinIO)
# PS> New-GenericSecret $env:SRM_NAMESPACE $env:SRM_MINIO_SECRET_NAME -fileKeyValues @{'tls.crt'='./minio-tls.crt'; 'tls.key'='./minio-tls.key'; 'ca.crt'=$caPath}

mariadb:
  master:
    # @ignore (refer to main values file for details)
    masterCaConfigMap: srm-ca-configmap
    # @ignore (refer to main values file for details)
    masterTlsSecret: srm-db-tls-secret
    # @ignore
    # the TLS-based mysql configuration for the primary database
    config: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=utf8mb4
      collation-server=utf8mb4_general_ci
      optimizer_search_depth=0
      lower_case_table_names=1
      innodb_flush_log_at_trx_commit=0
      log_bin_trust_function_creators=1
      expire_logs_days=5
      ssl_cert=/bitnami/mariadb/tls/cert/tls.crt
      ssl_key=/bitnami/mariadb/tls/cert/tls.key
      ssl_ca=/bitnami/mariadb/tls/ca/ca.crt
      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
  slave:
    # @ignore
    # the TLS-based mysql configuration for the primary database
    config: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=utf8mb4
      collation-server=utf8mb4_general_ci
      optimizer_search_depth=0
      lower_case_table_names=1
      innodb_flush_log_at_trx_commit=0
      log_bin_trust_function_creators=1
      expire_logs_days=5

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      ssl_ca=/bitnami/mariadb/tls/ca/ca.crt

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

minio:
  tls:
    # @ignore (refer to values-to.yaml file for details)
    enabled: true
    # @ignore (refer to values-to.yaml file for details)
    existingSecret: srm-minio-tls-secret

to:
  # @ignore (refer to values-to.yaml file for details)
  caConfigMap: srm-ca-configmap
  # @ignore (refer to values-to.yaml file for details)
  tlsSecret: srm-to-tls-secret
  workflowStorage:
    # @ignore (refer to values-to.yaml file for details)
    configMapName: srm-ca-configmap
    # @ignore (refer to values-to.yaml file for details)
    configMapPublicCertKeyName: ca.crt

web:
  # @ignore (refer to main values file for details)
  cacertsSecret: srm-web-cacerts-secret
  # @ignore (refer to main values file for details)
  tlsSecret: srm-web-tls-secret
  service:
    # @ignore (refer to main values file for details)
    port: 9443
    # @ignore (refer to main values file for details)
    port_name: https
