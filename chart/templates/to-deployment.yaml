{{- if .Values.features.to -}}
{{ $storageCredentialSecretName := (include "srm-to.storageCredentialSecretName" .) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "srm-to.fullname" . | quote }}
  labels:
    {{- include "srm-to.labels" . | nindent 4 }}
spec:
  replicas: {{ required "numReplicas is required" (include "srm.sizing.toolServiceReplicas" .) }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "srm-to.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- include "srm-to.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "srm-to.serviceAccountName" . | quote }}
      securityContext:
        {{- toYaml .Values.to.systemSecurityContext.podSecurityContext | nindent 8 }}
      {{- if .Values.to.nodeSelector }}
      nodeSelector:
      {{- toYaml .Values.to.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.to.tolerations }}
      tolerations:
      {{- toYaml .Values.to.tolerations | nindent 8 }}
      {{- end }}
      containers:
      - name: tool-service
        image: "{{ .Values.to.image.registry }}/{{ .Values.to.image.repository.toolService }}:{{ .Values.to.image.tag }}"
        imagePullPolicy: Always
        resources:
          requests:
            ephemeral-storage: {{ .Values.to.resources.requests.storage }}
          limits:
            cpu: {{ include "srm.sizing.toolServiceCPU" . }}
            memory: {{ include "srm.sizing.toolServiceMemory" . }}
            {{- if .Values.to.resources.limits.storage }}
            ephemeral-storage: {{ .Values.to.resources.limits.storage }}
            {{- end }}
        command: 
          - "/opt/codedx/service/bin/service"
        args:
          - "-adminApiKeyPath"
          - "/opt/codedx/service/secrets/adminApiKey"
          - "-codeDxBaseUrl"
          - "{{ include "srm-web.serviceurl" . }}"
          - "-codeDxCaConfigMapName"
          - "{{ .Values.to.caConfigMap }}"
          - "-imageNameCodeDxTools"
          - "{{ .Values.to.image.registry }}/{{ .Values.to.image.repository.tools }}:{{ .Values.web.image.tag }}"
          - "-imageNamePrepare"
          - "{{ .Values.to.image.registry }}/{{ .Values.to.image.repository.prepare }}:{{ .Values.to.image.tag }}"
          - "-imageNameNewAnalysis"
          - "{{ .Values.to.image.registry }}/{{ .Values.to.image.repository.newAnalysis }}:{{ .Values.to.image.tag }}"
          - "-imageNameSendResults"
          - "{{ .Values.to.image.registry }}/{{ .Values.to.image.repository.sendResults }}:{{ .Values.to.image.tag }}"
          {{- if .Values.imagePullSecrets -}}
          {{- with index .Values.imagePullSecrets 0 }}
          - "-imagePullSecretKey"
          - "{{ .name }}"
          {{- end -}}
          {{- end }}
          - "-kubernetesNamespace"
          - "{{ .Release.Namespace }}"
          - "-logFile"
          - "/opt/codedx/service/logs/service.log"
          - "-logMaxSizeMB"
          - "{{ .Values.to.logs.maxSizeMB }}"
          - "-logMaxBackups"
          - "{{ .Values.to.logs.maxBackups }}"
          - "-minimumWorkflowStepRunTime"
          - "{{ .Values.to.minimumWorkflowStepRunTimeSeconds }}"
          - "-storageEndpoint"
          - "{{ include "srm-to.storageEndpoint" . }}"
          - "-storageTlsEnabled={{ include "srm-to.storageTlsEnabled" . }}"
          - "-storageBucket"
          - "{{ .Values.to.workflowStorage.bucketName }}"
          {{- if $storageCredentialSecretName }}
          - "-storageCredentialSecretName"
          - "{{ $storageCredentialSecretName }}"
          {{- end }}
          - "-storageTlsConfigMapName"
          - "{{ include "srm-to.storageTlsConfigMapName" . }}"
          - "-storageTlsConfigMapPublicCertName"
          - "{{ include "srm-to.storageTlsConfigMapPublicCertName" . }}"
          - "-port"
          - "{{ required "toolServicePort is required" .Values.to.toolServicePort }}"
          - "-serviceName"
          - "{{ .Release.Name }}"
          {{- if .Values.to.tlsSecret }}
          - "-serviceTlsCertPath"
          - "/opt/codedx/service/tls/tls.crt"
          - "-serviceTlsKeyPath"
          - "/opt/codedx/service/tls/tls.key"
          {{- end }}
          - "-systemPodSecurityContext"
          - '{{ .Values.to.systemSecurityContext.podSecurityContext | toJson }}'
          - "-systemSecurityContext"
          - '{{ .Values.to.systemSecurityContext.securityContext | toJson }}'
          - "-workDir"
          - "/opt/codedx/service/work"
          - "-workflowControllerInstanceName"
          - "{{ .Release.Name }}"
          - "-workflowPriorityClassName"
          - "{{ include "srm-to.workflow.priorityClassName" . }}"
          - "-workflowServiceAccount"
          - "{{ include "srm-to.serviceAccountNameWorkflow" . }}"
        readinessProbe:
          httpGet:
            port: 3333
            path: /ready
          {{- if .Values.to.tlsSecret }}
            scheme: HTTPS
          {{- end }}
          initialDelaySeconds: 20
          periodSeconds: 60
          failureThreshold: 4
          timeoutSeconds: 30
        livenessProbe:
          httpGet:
            port: 3333
            path: /alive
          {{- if .Values.to.tlsSecret }}
            scheme: HTTPS
          {{- end }}
          initialDelaySeconds: 120
          periodSeconds: 60
          failureThreshold: 4
          timeoutSeconds: 30
        securityContext:
          {{- toYaml .Values.to.systemSecurityContext.securityContext | nindent 10 }}
        volumeMounts:
        - name: tool-service-secret-volume
          mountPath: "/opt/codedx/service/secrets/adminApiKey"
          readOnly: true
          subPath: adminApiKey
        {{ if $storageCredentialSecretName }}
        - name: storage-secret-volume
          mountPath: "/opt/codedx/service/secrets/storageUsername"
          readOnly: true
          subPath: storageUsername
        - name: storage-secret-volume
          mountPath: "/opt/codedx/service/secrets/storagePassword"
          readOnly: true
          subPath: storagePassword
        {{ end -}}
        {{ if .Values.to.workflowStorage.configMapName -}}
        - name: storage-cert-volume
          mountPath: /etc/ssl/certs/cdx-minio.pem
          subPath: cdx-minio.pem
          readOnly: true
        {{ end -}}
        {{ if .Values.to.tlsSecret -}}
        - name: tool-service-tls-volume
          mountPath: "/opt/codedx/service/tls"
        {{ end -}}
        - name: ephemeral-tmp
          mountPath: /opt/codedx/service/tmp
        - name: ephemeral-work
          mountPath: /opt/codedx/service/work
        - name: ephemeral-logs
          mountPath: /opt/codedx/service/logs
        ports:
        - containerPort: 3333
          name: http
      priorityClassName: {{ include "srm-to.service.priorityClassName" . | quote }}
      volumes:
      - name: ephemeral-tmp
        emptyDir: {}
      - name: ephemeral-work
        emptyDir: {}
      - name: ephemeral-logs
        emptyDir: {}
      - name: tool-service-secret-volume
        secret:
          secretName: {{ include "srm-to.to.secret" . | quote }}
          items:
          - key: api-key
            path: adminApiKey
      {{ if $storageCredentialSecretName }}
      - name: storage-secret-volume
        secret:
          secretName: {{ $storageCredentialSecretName | quote }}
          items:
          - key: access-key
            path: storageUsername
          - key: secret-key
            path: storagePassword
      {{ end -}}
      {{ if .Values.to.workflowStorage.configMapName -}}
      - name: storage-cert-volume
        configMap:
          name: {{ .Values.to.workflowStorage.configMapName }}
          items:
            - key: {{ .Values.to.workflowStorage.configMapPublicCertKeyName }}
              path: cdx-minio.pem
      {{ end -}}
      {{ if .Values.to.tlsSecret -}}
      - name: tool-service-tls-volume
        secret:
          secretName: {{ .Values.to.tlsSecret }}
      {{ end -}}
{{- end -}}
